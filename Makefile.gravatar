# EVA Preprocessing Makefile (Adapted for Gravatar)
# This adapts EVA's preprocessing pipeline to work with uv instead of conda

SHELL := /bin/bash

# Paths
GRAVATAR_ROOT := /home/ubuntu/gravatar
EVA_ROOT := $(GRAVATAR_ROOT)/submodules/EVA_Official
VENV := $(EVA_ROOT)/.venv_eva/bin/python              # PyTorch 1.12 for Stage 1
VENV_STAGE2 := $(EVA_ROOT)/.venv_eva_stage2/bin/python  # PyTorch 2.x for Stage 2/3

# Data paths (can be overridden)
ROOT_PATH ?= $(GRAVATAR_ROOT)/data/processed/male-3-casual
OUT_PATH := $(ROOT_PATH)/smplifyx

# GPU Configuration (can be overridden for H100)
GPU_ID ?= 0
NUM_GPUS ?= 1
SMPLER_SPLIT ?= 1          # Number of parallel SMPLer-X processes (1 for L4, 2-4 for H100)
SMPLIFY_SPLIT ?= 4         # Number of parallel SMPLify-X processes (4 default)
SMPLER_MODEL ?= smpler_x_h32  # Model variant (s32/b32/l32/h32)

.PHONY: help install-env test-env prep-dirs clear-gpu stage1 stage2 stage3 preprocess-full preprocess-subject preprocess-h100 preprocess-subject-h100

help:
	@echo "EVA Preprocessing for Gravatar"
	@echo "================================"
	@echo ""
	@echo "Installation:"
	@echo "  make install-env                 - Create Python 3.8 venv and install all dependencies (run once)"
	@echo "  make test-env                    - Test EVA environment"
	@echo ""
	@echo "Preprocessing (L4 GPU - Recommended):"
	@echo "  make stage1                      - Run Stage 1: DWPose, Matting, SMPLer-X ✅ WORKING"
	@echo "  make preprocess-subject SUBJECT=name  - Process subject with Stage 1 only"
	@echo ""
	@echo "Preprocessing (Optional - Advanced):"
	@echo "  make stage2                      - Run Stage 2: HAMER hand refinement (needs more deps)"
	@echo "  make stage3                      - Run Stage 3: SMPLify-X optimization (needs more deps)"
	@echo "  make preprocess-full             - Run all 3 stages (Stage 1 sufficient for most use)"
	@echo ""
	@echo "Preprocessing (H100 GPU - Optimized):"
	@echo "  make preprocess-h100             - Faster: SMPLER_SPLIT=4, SMPLIFY_SPLIT=8"
	@echo "  make preprocess-subject-h100 SUBJECT=name  - H100 preset for subject"
	@echo ""
	@echo "Environment Variables:"
	@echo "  ROOT_PATH=path                   - Input data directory (default: data/processed/male-3-casual)"
	@echo "  GPU_ID=0                         - GPU device ID (default: 0)"
	@echo "  SMPLER_SPLIT=1                   - SMPLer-X parallel processes (1 for L4, 2-4 for H100)"
	@echo "  SMPLIFY_SPLIT=4                  - SMPLify-X parallel processes (default: 4)"
	@echo "  SMPLER_MODEL=smpler_x_h32        - SMPLer-X model variant (s32/b32/l32/h32)"
	@echo ""
	@echo "Examples:"
	@echo "  L4 GPU:  make preprocess-full SMPLER_SPLIT=1"
	@echo "  H100 GPU: make preprocess-full SMPLER_SPLIT=4 SMPLIFY_SPLIT=8"
	@echo ""
	@echo "Output:"
	@echo "  Creates {subject}/smplx/*.pkl with fitted SMPL-X parameters"
	@echo ""

# Installation
install-env-stage1:
	@echo "=========================================="
	@echo "Installing EVA Environment"
	@echo "=========================================="
	@echo "Creating Python 3.8 virtual environment..."
	@if [ -d "$(EVA_ROOT)/.venv_eva" ]; then \
		echo "✓ Virtual environment already exists"; \
	else \
		uv venv --python 3.8 $(EVA_ROOT)/.venv_eva; \
	fi
	@echo ""
	@echo "Installing PyTorch 1.12.0 + CUDA 11.6..."
	uv pip install --python $(EVA_ROOT)/.venv_eva \
		torch==1.12.0+cu116 torchvision==0.13.0+cu116 \
		--extra-index-url https://download.pytorch.org/whl/cu116
	@echo ""
	@echo "Installing pip, setuptools, wheel..."
	uv pip install --python $(EVA_ROOT)/.venv_eva pip setuptools wheel
	@echo ""
	@echo "Installing mmcv-full..."
	uv pip install --python $(EVA_ROOT)/.venv_eva --no-build-isolation \
		mmcv-full==1.7.1 \
		-f https://download.openmmlab.com/mmcv/dist/cu116/torch1.12.0/index.html
	@echo ""
	@echo "Installing SMPLer-X requirements..."
	uv pip install --python $(EVA_ROOT)/.venv_eva --no-build-isolation \
		-r $(EVA_ROOT)/preprocess/SMPLer-X/requirements.txt
	@echo ""
	@echo "Installing transformer utils..."
	cd $(EVA_ROOT)/preprocess/SMPLer-X/main/transformer_utils && \
		uv pip install --python $(EVA_ROOT)/.venv_eva -e . --no-build-isolation
	@echo ""
	@echo "Installing specific versions for compatibility..."
	uv pip install --python $(EVA_ROOT)/.venv_eva \
		setuptools==69.5.1 yapf==0.40.1 numpy==1.23.5
	@echo ""
	@echo "Installing onnxruntime for DWPose..."
	uv pip install --python $(EVA_ROOT)/.venv_eva onnxruntime-gpu
	@echo ""
	@echo "Applying compatibility patches..."
	@# Patch torchgeometry for PyTorch 1.12 boolean tensor compatibility
	@sed -i 's/mask_c1 = mask_d2 \* (1 - mask_d0_d1)/mask_c1 = mask_d2 * (~mask_d0_d1)/' \
		$(EVA_ROOT)/.venv_eva/lib/python3.8/site-packages/torchgeometry/core/conversions.py || true
	@sed -i 's/mask_c2 = (1 - mask_d2) \* mask_d0_nd1/mask_c2 = (~mask_d2) * mask_d0_nd1/' \
		$(EVA_ROOT)/.venv_eva/lib/python3.8/site-packages/torchgeometry/core/conversions.py || true
	@sed -i 's/mask_c3 = (1 - mask_d2) \* (1 - mask_d0_nd1)/mask_c3 = (~mask_d2) * (~mask_d0_nd1)/' \
		$(EVA_ROOT)/.venv_eva/lib/python3.8/site-packages/torchgeometry/core/conversions.py || true
	@echo "✓ Patches applied"
	@echo ""
	@echo "=========================================="
	@echo "✅ EVA Environment Installation Complete!"
	@echo "=========================================="
	@echo ""
	@echo "Note: Applied torchgeometry patch for PyTorch 1.12 compatibility"
	@echo "Test with: make test-env"
	@echo ""

install-env-stage2:
	@echo "=========================================="
	@echo "Installing Stage 2/3 Environment (PyTorch 2.x)"
	@echo "=========================================="
	@if [ -d "$(EVA_ROOT)/.venv_eva_stage2" ]; then \
		echo "✓ Virtual environment already exists"; \
	else \
		uv venv --python 3.8 $(EVA_ROOT)/.venv_eva_stage2; \
	fi
	@echo "Installing pip, setuptools, wheel..."
	uv pip install --python $(EVA_ROOT)/.venv_eva_stage2 pip setuptools wheel
	@echo "Installing PyTorch 2.x..."
	uv pip install --python $(EVA_ROOT)/.venv_eva_stage2 \
		torch torchvision pytorch-lightning
	@echo "Installing HAMER dependencies (from setup.py)..."
	uv pip install --python $(EVA_ROOT)/.venv_eva_stage2 --no-build-isolation \
		gdown numpy opencv-python pyrender scikit-image smplx==0.1.28 \
		yacs timm einops xtcocotools pandas trimesh \
		pyrootutils rich webdataset \
		hydra-core hydra-submitit-launcher hydra-colorlog \
		configargparse loguru
	@echo "Installing mmcv (may take 5+ minutes)..."
	uv pip install --python $(EVA_ROOT)/.venv_eva_stage2 --no-build-isolation \
		mmcv==1.3.9
	@echo "Installing mmpose (from ViTPose)..."
	cd $(EVA_ROOT)/preprocess/hamer/third-party/ViTPose && \
		uv pip install --python $(EVA_ROOT)/.venv_eva_stage2 -e .
	@echo "Installing chumpy..."
	uv pip install --python $(EVA_ROOT)/.venv_eva_stage2 \
		"chumpy @ git+https://github.com/mattloper/chumpy"
	@echo "Installing human_body_prior (VPoser)..."
	uv pip install --python $(EVA_ROOT)/.venv_eva_stage2 \
		"human-body-prior @ git+https://github.com/nghorbani/human_body_prior"
	@echo "Installing HAMER package..."
	cd $(EVA_ROOT)/preprocess/hamer && \
		uv pip install --python $(EVA_ROOT)/.venv_eva_stage2 -e .[all]
	@echo "Applying Python 3.8 compatibility patches..."
	@# Fix dict | dict syntax for Python 3.8 in HAMER
	@sed -i 's/transformer_args = (transformer_args | dict/transformer_args = {**transformer_args, **dict/' \
		$(EVA_ROOT)/preprocess/hamer/hamer/models/heads/mano_head.py || true
	@sed -i 's/dict(cfg.MODEL.MANO_HEAD.TRANSFORMER_DECODER))/dict(cfg.MODEL.MANO_HEAD.TRANSFORMER_DECODER)}}/' \
		$(EVA_ROOT)/preprocess/hamer/hamer/models/heads/mano_head.py || true
	@# Add pickle/zipfile imports to mmcv for detectron2 checkpoint compatibility
	@sed -i '4a import pickle\nimport zipfile' \
		$(EVA_ROOT)/.venv_eva_stage2/lib/python3.8/site-packages/mmcv/runner/checkpoint.py || true
	@# Patch mmcv load_from_local to handle both ZIP and pickle formats
	@sed -i '261,269s/.*/    # Try torch.load (ZIP format) first, fallback to pickle for detectron2 format\n    try:\n        checkpoint = torch.load(filename, map_location=map_location)\n    except RuntimeError:\n        # Fallback to pickle for detectron2\/older format\n        with open(filename, '\''rb'\'') as f:\n            checkpoint = pickle.load(f)\n    return checkpoint/' \
		$(EVA_ROOT)/.venv_eva_stage2/lib/python3.8/site-packages/mmcv/runner/checkpoint.py || true
	@# Patch detectron2 to detect PyTorch ZIP vs pickle format
	@sed -i '71a \    is_zip = False\n    if filename.endswith(".pkl"):\n        with PathManager.open(filename, "rb") as f:\n            magic = f.read(2)\n            f.seek(0)\n            is_zip = (magic == b'\''PK'\'')\n' \
		$(EVA_ROOT)/.venv_eva_stage2/lib/python3.8/site-packages/detectron2/checkpoint/detection_checkpoint.py || true
	@# Add load_vposer wrapper to human_body_prior
	@echo "" >> $(EVA_ROOT)/.venv_eva_stage2/lib/python3.8/site-packages/human_body_prior/tools/model_loader.py
	@echo "# Backwards compatibility wrapper for SMPLify-X" >> $(EVA_ROOT)/.venv_eva_stage2/lib/python3.8/site-packages/human_body_prior/tools/model_loader.py
	@echo "def load_vposer(vposer_ckpt, vp_model='snapshot'):" >> $(EVA_ROOT)/.venv_eva_stage2/lib/python3.8/site-packages/human_body_prior/tools/model_loader.py
	@echo "    return load_model(vposer_ckpt, model_code=vp_model)" >> $(EVA_ROOT)/.venv_eva_stage2/lib/python3.8/site-packages/human_body_prior/tools/model_loader.py
	@# Patch SMPLify-X scripts to use venv python
	@for script in script1.py script2.py script3.py script4.py; do \
		sed -i '1a import sys\nPYTHON = sys.executable' \
			$(EVA_ROOT)/preprocess/smplify-x-ehuman-in-the-wild/$$script 2>/dev/null || true; \
		sed -i "s/'CUDA_VISIBLE_DEVICES={} python smplifyx/'CUDA_VISIBLE_DEVICES={} {} smplifyx/" \
			$(EVA_ROOT)/preprocess/smplify-x-ehuman-in-the-wild/$$script 2>/dev/null || true; \
		sed -i "s/.format(str(gpu_idx\[0\]), args.path/.format(str(gpu_idx[0]), PYTHON, args.path/" \
			$(EVA_ROOT)/preprocess/smplify-x-ehuman-in-the-wild/$$script 2>/dev/null || true; \
	done
	@echo "✓ Stage 2/3 environment ready"
	@echo ""
	@echo "Note: All patches applied automatically"
	@echo ""

install-env: install-env-stage1 install-env-stage2
	@echo "✅ All EVA environments installed!"
	@echo ""

# Prepare directories and symlinks for EVA compatibility
prep-dirs:
	@echo "Preparing directories for EVA..."
	@mkdir -p $(ROOT_PATH)/images
	@mkdir -p $(ROOT_PATH)/masks
	@mkdir -p $(ROOT_PATH)/smplx
	@mkdir -p $(ROOT_PATH)/dwpose
	@mkdir -p $(ROOT_PATH)/hamer
	@mkdir -p $(ROOT_PATH)/smplerx
	@# Create symlinks for EVA's expected names
	@cd $(ROOT_PATH) && ln -sf masks mask_new 2>/dev/null || true
	@echo "✓ Directories ready"

test-env:
	@echo "Testing EVA environment..."
	@$(VENV) -c "import torch; import mmcv; import smplx; print('✓ PyTorch:', torch.__version__); print('✓ mmcv:', mmcv.__version__); print('✓ CUDA:', torch.cuda.is_available())"
	@echo ""
	@echo "EVA environment ready!"

# Stage 1: DWPose + Matting + SMPLer-X (parallel)
stage1:
	@echo "=========================================="
	@echo "Stage 1: Initial Processing (parallel)"
	@echo "=========================================="
	@echo "Running: DWPose, Matting, SMPLer-X"
	@echo "ROOT_PATH=$(ROOT_PATH)"
	@echo ""
	@mkdir -p $(ROOT_PATH)
	@# DWPose
	@echo "Starting DWPose..."
	@cd $(EVA_ROOT)/preprocess/DWPose/control/annotator && \
	 ROOT_PATH=$(ROOT_PATH) $(VENV) inference.py --input_path $(ROOT_PATH) &
	@# Matting
	@echo "Starting Matting..."
	@cd $(EVA_ROOT)/preprocess/SemanticGuidedHumanMatting && \
	 CUDA_VISIBLE_DEVICES=0 ROOT_PATH=$(ROOT_PATH) $(VENV) extract_mask.py \
	 --input_path $(ROOT_PATH) --pretrained-weight ./pretrained/SGHM-ResNet50.pth &
	@# SMPLer-X (configurable parallel processes)
	@echo "Starting SMPLer-X ($(SMPLER_SPLIT) process(es))..."
	@for i in $$(seq 0 $$(($(SMPLER_SPLIT)-1))); do \
		echo "  SMPLer-X process $$i/$(SMPLER_SPLIT)"; \
		cd $(EVA_ROOT)/preprocess/SMPLer-X/main && \
		CUDA_VISIBLE_DEVICES=$(GPU_ID) $(VENV) inference.py \
		--num_gpus $(NUM_GPUS) --exp_name output --pretrained_model $(SMPLER_MODEL) \
		--agora_benchmark agora_model --img_path $(ROOT_PATH)/images \
		--output_folder $(ROOT_PATH)/smplerx --show_verts --show_bbox --save_mesh \
		--split_num $(SMPLER_SPLIT) --cur_num $$i & \
	done; \
	wait
	@echo "✓ Stage 1 complete"

# Stage 2: HAMER hand refinement (uses PyTorch 2.x venv)
stage2:
	@echo "=========================================="
	@echo "Stage 2: Hand Refinement (HAMER)"
	@echo "=========================================="
	@# Step 1: Compute mean shape
	@echo "Computing mean shape from SMPLer-X output..."
	@cd $(EVA_ROOT)/preprocess && \
	 $(VENV_STAGE2) M3_mean_shape_smplerx.py --input_path $(ROOT_PATH)
	@echo "neutral" > $(ROOT_PATH)/gender.txt
	@# Step 2: Run HAMER
	@echo "Running HAMER hand refinement..."
	@cd $(EVA_ROOT)/preprocess/hamer && \
	 CUDA_VISIBLE_DEVICES=$(GPU_ID) $(VENV_STAGE2) demo.py \
	 --img_folder $(ROOT_PATH)/images \
	 --out_folder $(ROOT_PATH)/hamer \
	 --batch_size=48 --side_view --save_mesh --full_frame
	@echo "✓ Stage 2 complete"

# Stage 3: SMPLify-X final optimization (uses Stage 2 venv with PyTorch 2.x)
stage3:
	@echo "=========================================="
	@echo "Stage 3: SMPLify-X Optimization"
	@echo "=========================================="
	@echo "Running $(SMPLIFY_SPLIT) parallel SMPLify-X optimization processes..."
	@for i in $$(seq 1 $(SMPLIFY_SPLIT)); do \
		echo "  SMPLify-X process $$i/$(SMPLIFY_SPLIT)"; \
		cd $(EVA_ROOT)/preprocess/smplify-x-ehuman-in-the-wild && \
		export PYTHONPATH=$$PYTHONPATH:$$(pwd)/smplifyx:$$(pwd) && \
		CUDA_VISIBLE_DEVICES=$(GPU_ID) \
		$(VENV_STAGE2) script$$i.py \
		--path $(ROOT_PATH) --out_path $(OUT_PATH) \
		--gpu_id $(GPU_ID) --split_num 40 & \
	done; \
	wait
	@echo "✓ Stage 3 complete"

# Run all stages
preprocess-full: prep-dirs stage1 stage2 stage3
	@echo ""
	@echo "=========================================="
	@echo "✅ EVA Preprocessing Complete!"
	@echo "=========================================="
	@echo ""
	@echo "Output: $(ROOT_PATH)/smplx/*.pkl"
	@echo ""
	@echo "Next step:"
	@echo "  cd $(GRAVATAR_ROOT)"
	@echo "  make train-one"
	@echo ""

# Process specific subject from Gravatar data
preprocess-subject:
	@if [ -z "$(SUBJECT)" ]; then \
		echo "Error: Please specify SUBJECT=name"; \
		echo "Example: make preprocess-subject SUBJECT=male-3-casual"; \
		exit 1; \
	fi
	@echo "Processing subject: $(SUBJECT)"
	@$(MAKE) preprocess-full ROOT_PATH=$(GRAVATAR_ROOT)/data/processed/$(SUBJECT)

# H100 GPU presets (faster with more parallel processes)
preprocess-h100:
	@echo "H100 GPU preset: 4 SMPLer-X + 8 SMPLify-X processes"
	@$(MAKE) preprocess-full SMPLER_SPLIT=4 SMPLIFY_SPLIT=8

preprocess-subject-h100:
	@if [ -z "$(SUBJECT)" ]; then \
		echo "Error: Please specify SUBJECT=name"; \
		exit 1; \
	fi
	@$(MAKE) preprocess-full ROOT_PATH=$(GRAVATAR_ROOT)/data/processed/$(SUBJECT) \
		SMPLER_SPLIT=4 SMPLIFY_SPLIT=8
